###### HTML base structure:

<!DOCTYPE html>
  <html>
    <head>
      title and css scripts
    </head>
    <body>
      html code & js scrips
    </body>
  </html>

Putting <link> tags in the head is proper specification for an optimized website.
When a page loads, HTML and CSS are read at the same time.
HTML creates the DOM
CSS creates the CSS Object Model

Place <script> </script> tags before the closing </body> tag. SCRIPT tags block HTML parsing while they are being read. Placement at the bottom allows for HTML to be parsed and displayed first. Ensures code that manipulates the DOM will not throw errors and halt the script if read before HTML.
Also SCRIPT tag can go in the <head> if used with the defer attribute. <script defer> </script> Same as running script after HTML.

[SCRIPT VS DEFER VS ASYNC] --> refers to execution, script is fetched when it hits the <script> tag added attribute determines execution
<script></script> HTML parsing is blocked/paused, script is fetched and executed immediately. Placed at the end of the body. If the script has errors or takes longer to run, the rest of the HTML will be delayed if placed in the head
[ASYNC VS DEFER] --> if both are specified, ASYNC takes precedence on newer browsers, DEFER will take over if ASYNC is not supported
<script async> </script> script is fetched the same time as HTML, when it is ready, HTML parsing is paused, script is executed and then HTML resumes afterwards (think of async/await action, executed when available). Use if script is independent of any other scripts.
<script defer></script> script fetched same with HTML, executed after HTML is finished. Same as placing script before the </body> tag except it finishes earlier since script has already been fetched/download

###### DOCTYPE

Abreviation for `DOCumemt TYPE`, always associated with a `DTD - Document Type Definition`. Declaration is **required**

DTD defines how docs of a certain type should be structured (ex: a button tag can contain a span tag but not a div) and a DOCTYPE declares what DTD the doc will follow...

###### XMLHttpRequest
Object used to interact w/ servers.
Retrieve data from a URL w/o a full page refresh asynchronously

const request = new XMLHttpRequest()

request.open(
  "GET",
  "http://localhost:3000/movies",
  true
)

request.onload = function() {
  const data = JSON.parse(this.response)
  ....create table head and body here
}

request.send();

###### Fetch API
Replaces XMLHttpRquest, unsupported by IE but polyfill can be used for such browsers.
Fetch uses Promises, avoiding use of callbacks.

async function() {
    const response = await fetch("http://localhost:3000/movies", {
      method: "POST",
      body: JSON.stringify([obj])
      headers: {
        "content-Type":"application/json" --> alternatives avail.
      }
    })
    const data = await response.json()
    return data
}

OR

fetch('https://api.github.com/users/swapnilbangare')
    .then(response => response.json();)
    .then(data => console.log(data))
    .catch(function (err) {
        console.log("Something went wrong!", err);
    });

